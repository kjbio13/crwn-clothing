{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nrequire('dotenv').config(); // const API_KEY = process.env.REACT_APP_API_KEY\n\n\nconst config = {\n  apiKey: \"AIzaSyDuZLNlo5q-LW0Ls_jMx4lWiuJ0fHg9Ttc\",\n  authDomain: \"crwn-db-c482a.firebaseapp.com\",\n  // authDomain: API_KEY,\n  databaseURL: \"https://crwn-db-c482a.firebaseio.com\",\n  projectId: \"crwn-db-c482a\",\n  storageBucket: \"crwn-db-c482a.appspot.com\",\n  messagingSenderId: \"1049295310533\",\n  appId: \"1:1049295310533:web:5b4dcca8881065b26caaac\",\n  measurementId: \"G-TE6F8GTH03\"\n}; //userAuth passed on from ComponentDidMount using .onAuthStateChanged()\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //check is not null\n  if (!userAuth) return; //reference a collection using firestore.doc(collection/documentID) - in this example the collection is users -- .doc check if it exists, and perform CRUD -DOCUMENTS\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //.collection reference the collection itself - queries the collection\n  // const collectionRef = firestore.collection('users');\n  //READ the snapshot property of the userRef using .get() -- check if object returns exists: true\n\n  const snapShot = await userRef.get(); // console.log(snapShot);\n  /////////////////////CHECK IF IT EXISTS//////////////////////////\n  ////////////////////using .get(), if it doesnt, CREATE by .set()////////////////\n  //if it doesn't exist, create\n  //after GET using .get() -- if it returns exists: false -- CREATE using documentReference - set()\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } /////////////////AFTER THIS LINE, IT WILL BE CREATED, HENCE EXISTS/////////////////////\n  //////////////////////////IF IT EXISTS, GO STRAIGHT HERE///////////////////////\n  //return userRef after setting if exists, returns the userRef from firestore.doc()\n\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const convertCollectionSnapshotToMap = collection => {\n  const transformedCollection = collection.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentuser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/kevinsouribio/Desktop/StartOfSomethingNew/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","require","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","convertCollectionSnapshotToMap","collection","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentuser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nrequire('dotenv').config();\n\n// const API_KEY = process.env.REACT_APP_API_KEY\n\nconst config = {\n    apiKey: \"AIzaSyDuZLNlo5q-LW0Ls_jMx4lWiuJ0fHg9Ttc\",\n    authDomain: \"crwn-db-c482a.firebaseapp.com\",\n    // authDomain: API_KEY,\n    databaseURL: \"https://crwn-db-c482a.firebaseio.com\",\n    projectId: \"crwn-db-c482a\",\n    storageBucket: \"crwn-db-c482a.appspot.com\",\n    messagingSenderId: \"1049295310533\",\n    appId: \"1:1049295310533:web:5b4dcca8881065b26caaac\",\n    measurementId: \"G-TE6F8GTH03\"\n};\n\n//userAuth passed on from ComponentDidMount using .onAuthStateChanged()\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\n    //check is not null\n    if (!userAuth) return;\n\n    //reference a collection using firestore.doc(collection/documentID) - in this example the collection is users -- .doc check if it exists, and perform CRUD -DOCUMENTS\n    const userRef = firestore.doc(`users/${userAuth.uid}`)\n    //.collection reference the collection itself - queries the collection\n    // const collectionRef = firestore.collection('users');\n\n    //READ the snapshot property of the userRef using .get() -- check if object returns exists: true\n    const snapShot = await userRef.get();\n    // console.log(snapShot);\n\n    /////////////////////CHECK IF IT EXISTS//////////////////////////\n    ////////////////////using .get(), if it doesnt, CREATE by .set()////////////////\n\n    //if it doesn't exist, create\n    //after GET using .get() -- if it returns exists: false -- CREATE using documentReference - set()\n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n        } catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n    /////////////////AFTER THIS LINE, IT WILL BE CREATED, HENCE EXISTS/////////////////////\n\n    //////////////////////////IF IT EXISTS, GO STRAIGHT HERE///////////////////////\n    //return userRef after setting if exists, returns the userRef from firestore.doc()\n    return userRef;\n\n}\n\nfirebase.initializeApp(config);\n\nexport const convertCollectionSnapshotToMap = (collection) => {\n    const transformedCollection = collection.docs.map(doc => {\n        const { title, items } = doc.data();\n\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        };\n    });\n\n    return transformedCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    }, {});\n\n};\n\nexport const getCurrentuser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth);\n        }, reject)\n    })\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n\n"]},"metadata":{},"sourceType":"module"}