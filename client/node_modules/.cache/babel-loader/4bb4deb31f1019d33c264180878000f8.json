{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInFailure, googleSignInStart } from './user.actions'; //DECONSTRUCT setCurrentUser\n// const { setCurrentUserProp } = this.props;\n// this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n//   if (userAuth) {\n//     const userRef = await createUserProfileDocument(userAuth);\n//     userRef.onSnapshot(snapShot => {\n//       setCurrentUserProp({\n//         id: snapShot.id,\n//         ...snapShot.data()\n//       })\n//     }) \n//   } else {\n//     setCurrentUserProp(userAuth);\n//   }\n// })\n//put -- puts value in the actions\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield call(auth.signInWithPopup(googleProvider));\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure, error);\n  }\n}\nexport function* onGoogleSignInStart() {\n  console.log('pss');\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["/Users/kevinsouribio/Desktop/StartOfSomethingNew/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","userActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","googleSignInStart","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","onGoogleSignInStart","console","log","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AAEA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,iBAAnD,QAA4E,gBAA5E,C,CACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,OAAO,UAAUC,gBAAV,GAA6B;AAEhC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,IAAI,CAACE,IAAI,CAACQ,eAAL,CAAqBP,cAArB,CAAD,CAA3B;AACA,UAAMQ,OAAO,GAAG,MAAMX,IAAI,CAACI,yBAAD,EAA4BK,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACO,mBAAmB,CAAC;AAAES,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG;AAAvC,KAAD,CAApB,CAAT;AACH,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,UAAMlB,GAAG,CAACQ,mBAAD,EAAsBU,KAAtB,CAAT;AACH;AACJ;AAGD,OAAO,UAAUC,mBAAV,GAAgC;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAEA,QAAMtB,UAAU,CAACI,eAAe,CAACmB,oBAAjB,EAAuCZ,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUa,SAAV,GAAsB;AACzB,QAAMtB,GAAG,CAAC,CAACC,IAAI,CAACiB,mBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport userActionTypes from './user.types'\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils'\n\nimport { googleSignInSuccess, googleSignInFailure, googleSignInStart } from './user.actions'\n//DECONSTRUCT setCurrentUser\n// const { setCurrentUserProp } = this.props;\n\n// this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n\n//   if (userAuth) {\n\n//     const userRef = await createUserProfileDocument(userAuth);\n//     userRef.onSnapshot(snapShot => {\n//       setCurrentUserProp({\n//         id: snapShot.id,\n//         ...snapShot.data()\n//       })\n\n//     }) \n//   } else {\n//     setCurrentUserProp(userAuth);\n//   }\n\n// })\n\n//put -- puts value in the actions\n\nexport function* signInWithGoogle() {\n\n    try {\n        const { user } = yield call(auth.signInWithPopup(googleProvider));\n        const userRef = yield call(createUserProfileDocument, user)\n        const userSnapshot = yield userRef.get();\n        yield put(googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data }))\n    } catch (error) {\n        yield put(googleSignInFailure, error)\n    }\n}\n\n\nexport function* onGoogleSignInStart() {\n    console.log('pss');\n\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart)]);\n}"]},"metadata":{},"sourceType":"module"}