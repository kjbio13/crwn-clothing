{"ast":null,"code":"var _jsxFileName = \"/Users/kevinsouribio/Desktop/StartOfSomethingNew/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'; //styles\n\nimport './sign-in.styles.scss'; //components\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    handleChange: handleChange,\n    label: \"email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    isGoogleSignIn: true,\n    onClick: googleSignInStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, ' ', \"Sign In with Google\", ' '))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/kevinsouribio/Desktop/StartOfSomethingNew/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux'\n\n//styles\nimport './sign-in.styles.scss'\n\n//components\nimport FormInput from '../form-input/form-input.component'\nimport CustomButton from '../custom-button/custom-button.component'\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions'\n\nconst SignIn = ({ emailSignInStart, googleSignInStart }) => {\n\n    const [userCredentials, setCredentials] = useState(\n        {\n            email: '',\n            password: ''\n        }\n    )\n\n    const { email, password } = userCredentials;\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        emailSignInStart(email, password)\n    }\n\n    const handleChange = (event) => {\n\n        const { value, name } = event.target;\n\n        setCredentials({\n            ...userCredentials,\n            [name]: value\n        })\n\n\n    }\n\n    return (\n        <div className=\"sign-in\">\n            <h2>I already have an account</h2>\n            <span>Sign in with your email and password</span>\n\n            <form onSubmit={handleSubmit}>\n\n\n                <FormInput\n                    name=\"email\"\n                    type=\"email\"\n                    value={email}\n                    handleChange={handleChange}\n                    label=\"email\"\n                    required />\n\n                <FormInput\n                    name=\"password\"\n                    type=\"password\"\n                    value={password}\n                    handleChange={handleChange}\n                    label=\"password\"\n                    required\n                />\n                <div className=\"buttons\">\n                    <CustomButton type=\"submit\">\n                        Sign In\n                        </CustomButton>\n\n                    <CustomButton type=\"button\" isGoogleSignIn onClick={googleSignInStart}>\n                        {' '}\n                            Sign In with Google\n                            {' '}\n                    </CustomButton>\n                </div>\n\n\n            </form>\n\n\n        </div>\n    );\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password }))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}