{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collection');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // collectionRef\n  // .get()\n  // .then(snapshot => {\n  //     const collectionsMap = convertCollectionSnapshotToMap(snapshot)\n  //     console.log(collectionsMap);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap))\n  //     // this.setState({ loading: false })\n  // }).catch(error => dispatch(fetchCollectionsFailure(error)))\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/kevinsouribio/Desktop/StartOfSomethingNew/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","ShopActionTypes","firestore","convertCollectionSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,+BAA1D;AAEA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAMA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACA,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,YAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACI,8BAAD,EAAiCQ,QAAjC,CAAjC;AACA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AAEH,GAND,CAME,OAAOC,KAAP,EAAc;AACZ,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH,GAXoC,CAYrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMlB,UAAU,CAACG,eAAe,CAACgB,uBAAjB,EACZX,qBADY,CAAhB;AAEH","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\n\nimport ShopActionTypes from './shop.types'\n\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport {\n    fetchCollectionsSuccess,\n    fetchCollectionsFailure\n} from './shop.actions';\n\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('I am fired');\n\n    try {\n        const collectionRef = firestore.collection('collection');\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n        yield put(fetchCollectionsSuccess(collectionsMap));\n\n    } catch (error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n    // collectionRef\n    // .get()\n    // .then(snapshot => {\n    //     const collectionsMap = convertCollectionSnapshotToMap(snapshot)\n    //     console.log(collectionsMap);\n    //     dispatch(fetchCollectionsSuccess(collectionsMap))\n    //     // this.setState({ loading: false })\n    // }).catch(error => dispatch(fetchCollectionsFailure(error)))\n\n\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync)\n}"]},"metadata":{},"sourceType":"module"}